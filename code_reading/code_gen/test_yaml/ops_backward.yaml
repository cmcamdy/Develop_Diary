- backward_op : partial_sum_grad
  forward : partial_sum (Tensor[] x, int start_index = 0, int length = -1) -> Tensor(out)
  args : (Tensor[] x, Tensor out_grad, int start_index, int length)
  output : Tensor[](x_grad){x.size()}
  infer_meta :
    func : PartialSumGradInferMeta
    param : [x]
  kernel :
    func : partial_sum_grad

- backward_op: straight_through_estimator_grad
  forward: fake_quantize_dequantize_moving_average_abs_max (Tensor x, Tensor in_scale, Tensor in_accum, Tensor in_state, float moving_rate = 0.9, int bit_length = 8, int round_type = 0, bool is_test = false) -> Tensor(out), Tensor(out_scale), Tensor(out_state), Tensor(out_accum)
  args: (Tensor x, Tensor out_grad, int moving_rate = 0.9, int bit_length = 8, int round_type = 0, bool is_test = false)
  output: Tensor(x_grad)
  infer_meta:
    func: UnchangedInferMeta
    param : [x]
  kernel:
    func: straight_through_estimator_grad
    data_type: x_grad

# - backward_op: straight_through_estimator_grad2
- backward_op: straight_through_estimator_grad
  forward: moving_average_abs_max_scale (Tensor x, Tensor in_accum, Tensor in_state, float moving_rate=0.9f, bool is_test=false) -> Tensor(out), Tensor(out_scale), Tensor(out_state), Tensor(out_accum)
  args: (Tensor x, Tensor out_grad, int bit_length = 8, int round_type = 0, bool is_test=false)
  output: Tensor(x_grad)
  infer_meta:
    func: UnchangedInferMeta
    param : [x]
  kernel:
    func: straight_through_estimator_grad
    data_type: x_grad
