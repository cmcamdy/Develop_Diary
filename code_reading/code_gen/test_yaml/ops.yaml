- op : partial_sum
  args : (Tensor[] x, int start_index = 0, int length = -1)
  output : Tensor(out)
  infer_meta :
    func : PartialSumInferMeta
  kernel :
    func : partial_sum
    data_type : x
  backward : partial_sum_grad

- op: fake_quantize_dequantize_moving_average_abs_max
  args: (Tensor x, Tensor in_scale, Tensor in_accum, Tensor in_state, float moving_rate = 0.9, int bit_length = 8, int round_type = 0, bool is_test = false)
  output: Tensor(out), Tensor(out_scale), Tensor(out_state), Tensor(out_accum)
  infer_meta:
    func: FakeQuantizeMovingAverageInferMeta
    param: [x]
  kernel:
    func: fake_quantize_dequantize_moving_average_abs_max
    data_type: x
  optional: out_state, out_accum
  backward: fake_quantize_dequantize_moving_average_abs_max_grad

- op: moving_average_abs_max_scale
  args: (Tensor x, Tensor in_accum, Tensor in_state, float moving_rate=0.9f, bool is_test=false)
  output: Tensor(out), Tensor(out_scale), Tensor(out_state), Tensor(out_accum)
  infer_meta:
    func: MovingAverageAbsMaxScaleInferMeta
    param: [x, in_accum, in_state]
  kernel:
    func: moving_average_abs_max_scale
    param: [x, in_accum, in_state, moving_rate, is_test]
  optional : in_accum, in_state, out, out_state, out_accum
  inplace : (in_accum -> out_accum), (in_state -> out_state)
  # backward: straight_through_estimator_grad2
  backward: moving_average_abs_max_scale_grad

- op: straight_through_estimator_grad
  args: (Tensor out_grad)
  output: Tensor(x_grad)
  infer_meta:
    func: UnchangedInferMeta
    param : [out_grad]
  kernel:
    func: straight_through_estimator_grad
